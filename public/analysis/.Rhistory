if( is.na(tb[i,j]) ) { tb[i,j]= 0 }
}
}
# Remove ZERO counts for 3/4 black analysis, 2016March22
tb$Black[tb$Black<=0] = NA
tb$halfBlack[tb$halfBlack<=0] = NA
tb$quarterBlack[tb$quarterBlack<=0] = NA
tb$ThreeQBlack[tb$ThreeQBlack<=0] = NA
tb$H2O2 = tb$H2O2stock/2
tb$tot = tb$White + tb$Black + tb$halfBlack + tb$quarterBlack + tb$ThreeQBlack + tb$QQBlack + tb$Other
tb.ori = tb;
tb = tb[ ! is.na(tb$White), ]
tb$Dilution = tb$Dilution / tb$Dilution[1]
######## normalize all data
mycolumns = c("White","Black","halfBlack", "quarterBlack","ThreeQBlack", "QQBlack", "Other","tot");
for ( j in mycolumns) {
tb[,j] = tb[,j] * tb$Dilution
}
####### find out means
H2O2 = sort(unique( tb$H2O2))
#s = H2O2
tbm = data.frame(cbind(H2O2))
for ( i in 1:length(H2O2)) {
c = H2O2[i]
tmp = tb[ tb$H2O2==c, ]
tbm$tot[i] = mean(tmp$tot, na.rm=T)
tbm$White[i] = mean(tmp$White, na.rm=T)
tbm$Black[i] = mean(tmp$Black, na.rm=T)
tbm$halfBlack[i] = mean(tmp$halfBlack, na.rm=T)
tbm$quarterBlack[i] = mean(tmp$quarterBlack, na.rm=T)
tbm$ThreeQBlack[i] = mean(tmp$ThreeQBlack, na.rm=T)
tbm$QQBlack[i] = mean(tmp$QQBlack, na.rm=T);
}
tbm = tbm[tbm$tot>1, ] #remove plates with zero colonies
###### calculate fractions
tbf = tbm;
tbf$s = tbf$tot / max(tbf$tot)
for ( j in 3:8) {
tbf[, j] = tbf[,j] / tbf$tot
}
tbf$Black[tbf$Black<0]=NA;  #remove weird experimental data, such as low-lead concentration effect
tryCatch(
{
H0TQB<-tbf$halfBlack*tbf$quarterBlack
tt = t.test( tbf$ThreeQBlack, H0TQB, pairwise=T, alternative = "greater")
print(tt)
output$p_ttest[ii] = tt$p.value
}, error = function(e) {e}
)
}
head(output)
summary(output)
output$flag = '';
output$flag = ifelse( output$p_ttest <=0.05, 'signicant', output$flag )
write.csv(output, "__batch_ttest-threeQBlack.csv")
library(xlsx)
write.xlsx(output,"__batch_ttest-threeQBlack.xlsx" )
summary(lm(tb3$L0.all ~  tb3$CbCv.vs.TgTc ))
source('~/.active-rstudio-document', echo=TRUE)
summary(lm(tb3$L0.all ~  tb3$TgTc.vs.CbCv ))
plot( tb3$L0.all ~ tb3$CbCv.vs.TgTc)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$CbCv.vs.TgTc)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$CbCv.vs.TgTc)
plot( tb3$L0.all ~ tb3$Tg.vs.Tc)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$Cb.vs.Cv)
plot( tb3$L0.all ~ tb3$Tg.vs.Tc)
plot( tb3$L0.all ~ 1/tb3$Cb.vs.Cv)
plot( tb3$L0.all ~ tb3$Cv.vs.Cb)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$Cv.vs.Cb)
summary(lm(tb3$L0.all ~  tb3$Cv.vs.Cb ))
summary(lm(tb3$L0.all ~  tb3$TgTc.vs.CbCv ))
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv)
abline(m, col="red")
m = lm(tb3$L0.all ~  tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv)
abline(m, col="red")
m = lm(tb3$L0.all ~  tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
main="Mitotic asymmetry ~ (Tg/Tc)/(Cb/Cv)")
abline(m, col="red")
summary(lm(tb3$L0.all ~  tb3$TgTc.vs.CbCv ))
m = lm(tb3$L0.all ~  tb3$TgTc.vs.CbCv)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
main="Mitotic asymmetry ~ (Tg/Tc)/(Cb/Cv)")
abline(m, col="blue")
par(font=2)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
main="Mitotic asymmetry ~ (Tg/Tc)/(Cb/Cv)")
abline(m, col="blue")
par(font=2)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
main="Mitotic asymmetry ~ (Tg/Tc)/(Cb/Cv)")
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv+0.08, tb3$L0.all+0.5, tb3$strain)
text( tb3$TgTc.vs.CbCv, tb3$L0.all, tb3$strain)
par(font=2)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression"
main="Mitotic asymmetry ~ (Tg/Tc)/(Cb/Cv)")
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all, tb3$strain)
par(font=2)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ (Tg/Tc)/(Cb/Cv)")
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all, tb3$strain)
par(font=2)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ Ability to suppress endogenous oxidative stress(Tg/Tc)/(Cb/Cv)")
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all, tb3$strain)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ Ability to suppress endogenous oxidative stress",
xlim = c(-0.05, 4.5), ylim=c(0, 0.3))
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ Ability to suppress endogenous oxidative stress",
xlim = c(-0.05, 4.5), ylim=c(0, 0.3))
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all, tb3$strain)
text( tb3$TgTc.vs.CbCv, tb3$L0.all+0.1, tb3$strain)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ Ability to suppress endogenous oxidative stress",
xlim = c(-0.05, 4.5), ylim=c(0, 0.3))
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all+0.01, tb3$strain)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ Ability to suppress endogenous oxidative stress",
xlim = c(-0.05, 4.5), ylim=c(0, 0.3))
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all+0.015, tb3$strain)
plot( tb3$L0.all ~ tb3$TgTc.vs.CbCv, pch=19, col="red",
ylab = "Better asymmetry <- L0 -> Worse assymetry",
xlab = "Weaker suppression <- (Tg/Tc)/(Cb/Cv) -> Stronger suppression",
main="Mitotic asymmetry ~ Ability to suppress endogenous oxidative stress",
xlim = c(-0.05, 4.5), ylim=c(0, 0.3))
abline(m, col="blue")
text( tb3$TgTc.vs.CbCv, tb3$L0.all+0.015, tb3$strain)
setwd("~/github/LOH_H2O2_2016/public/analysis")
rm( list = ls() );
setwd(~/github/LOH_H2O2_2016/public/analysis")
rm( list = ls() );
setwd("~/github/LOH_H2O2_2016/public/analysis")
list.files(pattern="csv", path='output')
list.files(pattern="csv")
list.files(pattern="csv", path="data")
tb2 = read.csv("data/LOHH2O2_averaged20131210_v1.csv")
tb = read.table("data/021307.summary.by.strain.csv", header=T, sep="\t");
tb.old = tb;
labels = names( tb.old );
tb = tb.old[, c("strain","ARLS","R0","G","CLS","Tc", "Tg","Tmmax","Tbmax", "Td", "Tdmax","TLmax","Lmax",
"b.max", "b.min", "strains", "L0.all", "L0.small" , "Pbt0","Pb0.5t0", "Pbt0.b") ];
tb$CLS.vs.Tc = tb$CLS / tb$Tc;
tb$Tg.vs.Tc = tb$Tg / tb$Tc;
tb$strain = as.character(tb$strain)
tb.old = tb;
tb = tb.old[1:13,] #remove rad52DD
tb.test = tb[1:11,]
summary(lm(Tg.vs.Tc ~ ARLS, data=tb.test)) #re-run the old results, just to double-check
summary(lm( 1/Tg.vs.Tc ~ ARLS, data=tb.test)) #good, negative, p=0.012
summary(lm(Tg.vs.Tc ~ ARLS, data=tb.test)) #re-run the old results, just to double-check
summary(lm( 1/Tg.vs.Tc ~ ARLS, data=tb.test)) # negative, p=0.012
plot( tb.test$Tg.vs.Tc ~ tb.test$ARLS, col='red', pch=19 )
text(tb.test$ARLS, tb.test$Tg.vs.Tc, tb.test$strains)
nat = read.table("data/062705.rls.cls.tab", sep="\t", header=T, colClasses=c("character", rep(NA,4))
);
tb2$strain = tb2$strains
tb3 = tb3[ , -(grep('strains', names(tb3))) ]
tb2$strain = tb2$strains
tb3 = merge(tb, tb2, by='strain')
tb3 = tb3[ , -(grep('strains', names(tb3))) ]
summary(lm(tb3$Cb.vs.Cv ~ tb3$ARLS)) #p 0.039
plot( tb3$Cb.vs.Cv ~ tb3$ARLS, col='blue', pch=19, xlab='ARLS', ylab='sensitive<= Cb/Cv => tolerant', xlim=c(22,38),ylim=c(-0.1,2.8) )
text(tb3$ARLS + 0.5, tb3$Cb.vs.Cv+0.1, tb3$strain)
m = lm(tb3$Cb.vs.Cv ~ tb3$ARLS )
abline(m, col='red', lty=2, lwd=2)
text(26, 2.0, "p=0.039, R2=0.36")
list.files( path="data")
nat = read.table("data/062705.rls.cls.tab", sep="\t", header=T, colClasses=c("character", rep(NA,4)) );
View(tb3)
View(tb)
summary(lm(tb3$Cb.vs.Cv ~ tb3$ARLS)) #p 0.039
plot( tb3$Cb.vs.Cv ~ tb3$ARLS, col='blue', pch=19, xlab='ARLS', ylab='sensitive<= Cb/Cv => tolerant', xlim=c(22,38),ylim=c(-0.1,2.8) )
text(tb3$ARLS + 0.5, tb3$Cb.vs.Cv+0.1, tb3$strain)
m = lm(tb3$Cb.vs.Cv ~ tb3$ARLS )
abline(m, col='red', lty=2, lwd=2)
text(26, 2.0, "p=0.039, R2=0.36")
Cb.vs.Cv ~ L0.all
#summary(lm(1/ tb3$Cb.vs.Cv ~ tb3$L0.small)) # p =0.685
summary(lm( tb3$Cb.vs.Cv ~  tb3$L0.all)) # p=0.0079
plot( tb3$Cb.vs.Cv ~ tb3$L0.all, col='blue', pch=19, xlab='Better asymmetry <- L0 -> Worse asymmetry', ylab='sensitive <- Cb/Cv ->tolerant', xlim=c(0, 0.3),ylim=c(-0.1,2.5) )
text(tb3$L0.all + 0.01, tb3$Cb.vs.Cv+0.1, tb3$strain)
m = lm(tb3$Cb.vs.Cv ~ tb3$L0.all )
abline(m, col='red', lty=2, lwd=2)
text(0.1, 2.0, "p=0.0079 R2=0.56")
summary(lm( tb3$Cb0.5.vs.Cv ~  tb3$b.min)) # p=0.036 ,R2=0.40
plot( tb3$Cb0.5.vs.Cv ~ tb3$b.min, col='blue', pch=19, xlim=c(-0.01, 0.025) )
text(tb3$b.min, tb3$Cb0.5.vs.Cv, tb3$strain)
m = lm(tb3$Cb0.5.vs.Cv  ~ tb3$b.min )
abline(m, col='red', lty=2, lwd=2)
text(0.1, 2.0, "p=0.036 R2=0.40")
summary(lm( tb3$CbMean ~  tb3$CvMean))
plot( tb3$CbMean ~ tb3$CvMean, col='blue', pch=19, xlim=c(0, 0.17), ylim=c(0,0.16) )
text(tb3$CvMean, tb3$CbMean, tb3$strain)
m = lm(tb3$CbMean  ~ tb3$CvMean )
abline(m, col='red', lty=2, lwd=2)
mystep=0.2
my.breaks = seq( 0.2,  round(max( c( tb3$Cb.vs.Cv, tb3$Tg.vs.Tc )) + 0.2, 1) ,by= mystep );
h.H2O2  <- hist( tb3$Cb.vs.Cv, br= my.breaks, xlab = "Cb/Cv", ylab = "relative density", freq=F ) ;
h.aging <- hist(tb$Tg.vs.Tc, br= my.breaks, xlab = "Tg/Tc",  ylab = "relative density", freq=F ) ;
#generate the comparison table
bins <-  data.frame( rbind(h.H2O2$density,h.aging$density) )  ;
# bins3 <-  data.frame( rbind(h.H2O2$density,h.aging$density, h.H2O2Mean$density) )  ;
my.mids = my.breaks[-length(my.breaks)] + mystep/2
#my.mids
names( bins ) <- my.mids
row.names(bins) <- c( "H2O2", "Chronological Aging" )
# row.names(bins3) <- c( "H2O2", "Chronological Aging", "H2O2 Mean" )
bins
# bins3
#pdf("plots/Figure_sideBYside20131209.pdf", width=8, height=5)
# tiff("plots/Figure_sideBYside20131209.tif", width=480, height=480)
barplot( as.matrix(bins), beside=T, col=c("black","gray"), ylab="Relative Frequency", xlab="Ratios",
legend= c( "Cb/Cv H2O2", "Tg/Tc CLS" )  );
title(main="Contrasting LOH patterns in CLS and H2O2 treatment" )
# dev.off();
par(font=2)
plot( tb3$ARLS ~ tb3$Cb.vs.Cv , pch=19, col="red", main="H2O2-LOH ~ ARLS, 20131209", ylim=c(22,38), xlim=c(0.1, 2.5)
, ylab='ARLS',xlab='Cb/Cv Tolerance to H2O2-induced genomic instability')
text( tb3$Cb.vs.Cv+0.08, tb3$ARLS+0.5, tb3$strain)
m = lm(tb3$ARLS ~ tb3$Cb.vs.Cv  )
abline( m, col="blue")
summary(m)
text(1.75, 28,  "R2=0.36 p=0.039")
summary(lm( tb3$Cb.vs.Cv ~  tb3$L0.all)) # p=0.0079
tb3$One.vs.L0.all = 1 / tb3$L0.all  #use 1/L0 maybe confusing when people try to compare this study with Qin08 results.
summary(lm( tb3$Cb.vs.Cv ~  tb3$One.vs.L0.all)) # p=0.039
text(1.75, 28,  "R2=0.36 p=0.039")
tb3$One.vs.L0.all = 1 / tb3$L0.all  #use 1/L0 maybe confusing when people try to compare this study with Qin08 results.
summary(lm( tb3$Cb.vs.Cv ~  tb3$One.vs.L0.all)) # p=0.039
plot( tb3$Cb.vs.Cv ~ tb3$One.vs.L0.all, col='blue', pch=19, xlab=' 1/L0', ylab='Cb/Cv' )
text(tb3$One.vs.L0.all + 0.01, tb3$Cb.vs.Cv+0.1, tb3$strain)
m = lm(tb3$Cb.vs.Cv ~ tb3$One.vs.L0.all )
abline(m, col='red', lty=2, lwd=2)
tb3$One.vs.L0.all = 1 / tb3$L0.all  #use 1/L0 maybe confusing when people try to compare this study with Qin08 results.
summary(lm( tb3$Cb.vs.Cv ~  tb3$One.vs.L0.all)) # p=0.039
plot( tb3$Cb.vs.Cv ~ tb3$One.vs.L0.all, col='blue', pch=19, xlab=' 1/L0', ylab='Cb/Cv', xlim=c(3,20),ylim=c(0.3, 3) )
text(tb3$One.vs.L0.all + 0.01, tb3$Cb.vs.Cv+0.1, tb3$strain)
m = lm(tb3$Cb.vs.Cv ~ tb3$One.vs.L0.all )
abline(m, col='red', lty=2, lwd=2)
tb3$One.vs.L0.all = 1 / tb3$L0.all  #use 1/L0 maybe confusing when people try to compare this study with Qin08 results.
summary(lm( tb3$Cb.vs.Cv ~  tb3$One.vs.L0.all)) # p=0.039
plot( tb3$Cb.vs.Cv ~ tb3$One.vs.L0.all, col='blue', pch=19, xlab=' 1/L0', ylab='Cb/Cv', xlim=c(2,19),ylim=c(0.2, 2.8) )
text(tb3$One.vs.L0.all + 0.01, tb3$Cb.vs.Cv+0.1, tb3$strain)
m = lm(tb3$Cb.vs.Cv ~ tb3$One.vs.L0.all )
abline(m, col='red', lty=2, lwd=2)
?hist
setwd("~/github/LOH_H2O2_2016/public/analysis")
# 20160125, try to add error bars to plots
rm=(list=ls())
debug = 0;
#all data are in 'data.H2O2-LOH'
FileList = list.files( path="../data.H2O2-LOH/");  FileList;
if( debug > 5) {FileList = FileList[1:2]}
# infile = FileList[2]
for( infile in FileList) {
# infile='M1-2,20111207.modified.csv' #debug for NA, and low lead concentration
# infile =  'M2-8,08172011.H2O2.LOH.modified.csv';  #viability plot error
# infile =  'M2-8,06062011.H2O2onLOH.csv';  #b plot error
fullFileName = paste('../data.H2O2-LOH/',infile, sep='');
mylabel = infile
tb = read.csv(fullFileName, colClasses=c("character",NA, NA, "character", rep("numeric",8 ), NA));
names(tb) = c("Strain", "OD600", "Dilution","Date","H2O2stock", "White", "Black", "halfBlack", "quarterBlack", "ThreeQBlack", "QQBlack", "Other", "Notes")
######## set zeros
mycolumns = c("White","Black","halfBlack", "quarterBlack","ThreeQBlack", "QQBlack", "Other");
for( i in 1:length(tb[,1])) {
for ( j in mycolumns) {
if( is.na(tb[i,j]) ) { tb[i,j]= 0 }
}
}
#H2O2 working stock is 2X
tb$H2O2 = tb$H2O2stock/2
tb$tot = tb$White + tb$Black + tb$halfBlack + tb$quarterBlack + tb$ThreeQBlack + tb$QQBlack + tb$Other
tb.ori = tb;
tb = tb[ ! is.na(tb$White), ]
tb$Dilution = tb$Dilution / tb$Dilution[1]
######## normalize all data
mycolumns = c("White","Black","halfBlack", "quarterBlack","ThreeQBlack", "QQBlack", "Other","tot");
for ( j in mycolumns) {
tb[,j] = tb[,j] * tb$Dilution
}
####### find out means
H2O2 = sort(unique( tb$H2O2))
#s = H2O2
tbm = data.frame(cbind(H2O2))
for ( i in 1:length(H2O2)) {
c = H2O2[i]
tmp = tb[ tb$H2O2==c, ]
tbm$tot[i] = mean(tmp$tot, na.rm=T)
tbm$tot.sd[i] = sd(tmp$tot, na.rm=T)
tbm$White[i] = mean(tmp$White, na.rm=T)
tbm$White.sd[i] = sd(tmp$White, na.rm=T)
tbm$Black[i] = mean(tmp$Black, na.rm=T)
tbm$Black.sd[i] = sd(tmp$Black, na.rm=T)
tbm$halfBlack[i] = mean(tmp$halfBlack, na.rm=T)
tbm$halfBlack.sd[i] = sd(tmp$halfBlack, na.rm=T)
tbm$quarterBlack[i] = mean(tmp$quarterBlack, na.rm=T)
tbm$ThreeQBlack[i] = mean(tmp$ThreeQBlack, na.rm=T)
tbm$QQBlack[i] = mean(tmp$QQBlack, na.rm=T);
}
tbm = tbm[tbm$tot>1, ] #remove plates with zero colonies
###### some manual curations here
#tbm$halfBlack[tbm$halfBlack==0 & tbm$H2O2>0] = NA;
###### calculate fractions
tbf = tbm;
tbf$s = tbf$tot / max(tbf$tot)
tbf$s.sd = tbm$tot.sd / max(tbm$tot)
for ( j in 3:11) {
tbf[, j] = tbf[,j] / tbf$tot
}
tbf$Black[tbf$Black<0]=NA;  #remove weird experimental data, such as low-lead concentration effect
pdf(paste("sandbox/",infile, ".batch.sd.pdf", sep=''), width=5, height=5)
### full black plot
plot( tbf$s ~ tbf$H2O2, col="blue", axes=F, xlab='', ylab='', ylim=c(-0.05, 1.2), type='p');
lines( tbf$s ~ tbf$H2O2, col="blue",lty=2)
arrows( tbf$H2O2, (tbf$s - tbf$s.sd), tbf$H2O2, (tbf$s + tbf$s.sd), length=0.1, angle=90,code=3, lty=1, col="blue" );
axis( 4, at=pretty(c(0, 1.2)), col='black')
legend ( max(H2O2)*0.7, 0.9, c("viability","black"), col=c("blue","black"), lty=c(2,1), pch=c(1,16) )
par(new=T)
plot( tbf$Black ~ tbf$H2O2, pch=16, xlab='H2O2',ylab="black", ylim=c(-0.01, max(tbf$Black, na.rm = T)*3))
lines(tbf$Black ~ tbf$H2O2)
bottoms = tbf$Black -tbf$Black.sd
bottoms[bottoms<0]= 0.001
arrows( tbf$H2O2, bottoms, tbf$H2O2, (tbf$Black + tbf$Black.sd), length=0.1, angle=90,code=3, lty=1, col="gray" );
title(mylabel)
## full black -log plot
#tbf$H2O2[tbf$H2O2==0] = min(H2O2[-1])/10;
#with( tbf, plot( tot ~ log10(H2O2), col="blue"));
#par(new=T)
#with( tbf, plot( Black ~ log10(H2O2), pch=16))
#tbf$H2O2[tbf$H2O2==0] = min(H2O2[-1])/10;
#with( tbf, plot( s ~ log10(H2O2), col="blue", axes=F, xlab="H2O2", ylab='viability'), ylim=c(-0.5, 1.1) );
#xlabels = log10(c(0.001,0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.15))
#axis(1, at = xlabels, labels= 10^xlabels)
#ylabels = c(0, 0.25, 0.5, 0.75, 1.0)
#axis(2, at=ylabels, labels=ylabels);
#par(new=T)
#with( tbf, plot( Black ~ log10(H2O2), pch=16, axes=F, xlab='', ylab=''))
#axis(4, pretty(range(tbf$Black)))
#title(mylabel)
### half black plot
plot( tbf$s ~ tbf$H2O2, col="blue", axes=F, xlab='', ylab='', ylim=c(0, 1.2), type='p', main=mylabel);
lines( tbf$s ~ tbf$H2O2, col="blue",lty=2)
axis( 4, at=pretty(c(0, 1.2)))
legend ( max(H2O2)*0.7, 0.5, c("viability","half-black"), col=c("blue","red"), lty=c(2,1), pch=c(1,16) )
par(new=T)
plot( tbf$halfBlack ~ tbf$H2O2, pch=16, xlab='H2O2',ylab="half-black", col='red', ylim=c(-0.005, max(tbf$halfBlack, na.rm=T)*2 ))
lines(tbf$halfBlack ~ tbf$H2O2, col='red')
bottoms = tbf$halfBlack - tbf$halfBlack.sd
bottoms[bottoms<0]= 0
arrows( tbf$H2O2, bottoms, tbf$H2O2, (tbf$halfBlack + tbf$halfBlack.sd), length=0.1, angle=90,code=3, lty=1, col="gray" );
title(mylabel)
### half/full plot
tbf$half.vs.full = tbf$halfBlack / tbf$Black
plot( tbf$s ~ tbf$H2O2, col="blue", axes=F, xlab='', ylab='', ylim=c(0, 1.2), type='p', main=mylabel);
lines( tbf$s ~ tbf$H2O2, col="blue",lty=2)
axis( 4, at=pretty(c(0, 1.2)))
legend ( max(H2O2)*0.7, 0.5, c("viability","half/full"), col=c("blue","green"), lty=c(2,1), pch=c(1,16) )
par(new=T)
plot( tbf$half.vs.full ~ tbf$H2O2, pch=16, xlab='H2O2',ylab="half/full", col='green')
lines(tbf$half.vs.full ~ tbf$H2O2, col='green')
bottoms = tbf$Black -tbf$Black.sd
bottoms[bottoms<0]= 0.001
title(mylabel)
dev.off() #end pdf
} #infile loop
#quit("yes")
# 20160125, try to add error bars to plots
rm=(list=ls())
debug = 0;
#all data are in 'data.H2O2-LOH'
FileList = list.files( path="../data.H2O2-LOH/");  FileList;
if( debug > 5) {FileList = FileList[1:2]}
# infile = FileList[2]
for( infile in FileList) {
# infile='M1-2,20111207.modified.csv' #debug for NA, and low lead concentration
# infile =  'M2-8,08172011.H2O2.LOH.modified.csv';  #viability plot error
# infile =  'M2-8,06062011.H2O2onLOH.csv';  #b plot error
fullFileName = paste('../data.H2O2-LOH/',infile, sep='');
mylabel = infile
tb = read.csv(fullFileName, colClasses=c("character",NA, NA, "character", rep("numeric",8 ), NA));
names(tb) = c("Strain", "OD600", "Dilution","Date","H2O2stock", "White", "Black", "halfBlack", "quarterBlack", "ThreeQBlack", "QQBlack", "Other", "Notes")
######## set zeros
mycolumns = c("White","Black","halfBlack", "quarterBlack","ThreeQBlack", "QQBlack", "Other");
for( i in 1:length(tb[,1])) {
for ( j in mycolumns) {
if( is.na(tb[i,j]) ) { tb[i,j]= 0 }
}
}
#H2O2 working stock is 2X
tb$H2O2 = tb$H2O2stock/2
tb$tot = tb$White + tb$Black + tb$halfBlack + tb$quarterBlack + tb$ThreeQBlack + tb$QQBlack + tb$Other
tb.ori = tb;
tb = tb[ ! is.na(tb$White), ]
tb$Dilution = tb$Dilution / tb$Dilution[1]
######## normalize all data
mycolumns = c("White","Black","halfBlack", "quarterBlack","ThreeQBlack", "QQBlack", "Other","tot");
for ( j in mycolumns) {
tb[,j] = tb[,j] * tb$Dilution
}
####### find out means
H2O2 = sort(unique( tb$H2O2))
#s = H2O2
tbm = data.frame(cbind(H2O2))
for ( i in 1:length(H2O2)) {
c = H2O2[i]
tmp = tb[ tb$H2O2==c, ]
tbm$tot[i] = mean(tmp$tot, na.rm=T)
tbm$tot.sd[i] = sd(tmp$tot, na.rm=T)
tbm$White[i] = mean(tmp$White, na.rm=T)
tbm$White.sd[i] = sd(tmp$White, na.rm=T)
tbm$Black[i] = mean(tmp$Black, na.rm=T)
tbm$Black.sd[i] = sd(tmp$Black, na.rm=T)
tbm$halfBlack[i] = mean(tmp$halfBlack, na.rm=T)
tbm$halfBlack.sd[i] = sd(tmp$halfBlack, na.rm=T)
tbm$quarterBlack[i] = mean(tmp$quarterBlack, na.rm=T)
tbm$ThreeQBlack[i] = mean(tmp$ThreeQBlack, na.rm=T)
tbm$QQBlack[i] = mean(tmp$QQBlack, na.rm=T);
}
tbm = tbm[tbm$tot>1, ] #remove plates with zero colonies
###### some manual curations here
#tbm$halfBlack[tbm$halfBlack==0 & tbm$H2O2>0] = NA;
###### calculate fractions
tbf = tbm;
tbf$s = tbf$tot / max(tbf$tot)
tbf$s.sd = tbm$tot.sd / max(tbm$tot)
for ( j in 3:11) {
tbf[, j] = tbf[,j] / tbf$tot
}
tbf$Black[tbf$Black<0]=NA;  #remove weird experimental data, such as low-lead concentration effect
pdf(paste("sandbox/",infile, ".batch.sd.pdf", sep=''), width=5, height=5)
### full black plot
plot( tbf$s ~ tbf$H2O2, col="blue", axes=F, xlab='', ylab='', ylim=c(-0.05, 1.2), type='p');
lines( tbf$s ~ tbf$H2O2, col="blue",lty=2)
arrows( tbf$H2O2, (tbf$s - tbf$s.sd), tbf$H2O2, (tbf$s + tbf$s.sd), length=0.1, angle=90,code=3, lty=1, col="blue" );
axis( 4, at=pretty(c(0, 1.2)), col='black')
legend ( max(H2O2)*0.7, 0.9, c("viability","black"), col=c("blue","black"), lty=c(2,1), pch=c(1,16) )
par(new=T)
plot( tbf$Black ~ tbf$H2O2, pch=16, xlab='H2O2',ylab="black", ylim=c(-0.01, max(tbf$Black, na.rm = T)*3))
lines(tbf$Black ~ tbf$H2O2)
bottoms = tbf$Black -tbf$Black.sd
bottoms[bottoms<0]= 0.001
arrows( tbf$H2O2, bottoms, tbf$H2O2, (tbf$Black + tbf$Black.sd), length=0.1, angle=90,code=3, lty=1, col="gray" );
title(mylabel)
## full black -log plot
#tbf$H2O2[tbf$H2O2==0] = min(H2O2[-1])/10;
#with( tbf, plot( tot ~ log10(H2O2), col="blue"));
#par(new=T)
#with( tbf, plot( Black ~ log10(H2O2), pch=16))
#tbf$H2O2[tbf$H2O2==0] = min(H2O2[-1])/10;
#with( tbf, plot( s ~ log10(H2O2), col="blue", axes=F, xlab="H2O2", ylab='viability'), ylim=c(-0.5, 1.1) );
#xlabels = log10(c(0.001,0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.15))
#axis(1, at = xlabels, labels= 10^xlabels)
#ylabels = c(0, 0.25, 0.5, 0.75, 1.0)
#axis(2, at=ylabels, labels=ylabels);
#par(new=T)
#with( tbf, plot( Black ~ log10(H2O2), pch=16, axes=F, xlab='', ylab=''))
#axis(4, pretty(range(tbf$Black)))
#title(mylabel)
### half black plot
plot( tbf$s ~ tbf$H2O2, col="blue", axes=F, xlab='', ylab='', ylim=c(0, 1.2), type='p', main=mylabel);
lines( tbf$s ~ tbf$H2O2, col="blue",lty=2)
axis( 4, at=pretty(c(0, 1.2)))
legend ( max(H2O2)*0.7, 0.5, c("viability","half-black"), col=c("blue","red"), lty=c(2,1), pch=c(1,16) )
par(new=T)
plot( tbf$halfBlack ~ tbf$H2O2, pch=16, xlab='H2O2',ylab="half-black", col='red', ylim=c(-0.005, max(tbf$halfBlack, na.rm=T)*2 ))
lines(tbf$halfBlack ~ tbf$H2O2, col='red')
bottoms = tbf$halfBlack - tbf$halfBlack.sd
bottoms[bottoms<0]= 0
arrows( tbf$H2O2, bottoms, tbf$H2O2, (tbf$halfBlack + tbf$halfBlack.sd), length=0.1, angle=90,code=3, lty=1, col="gray" );
title(mylabel)
### half/full plot
tbf$half.vs.full = tbf$halfBlack / tbf$Black
plot( tbf$s ~ tbf$H2O2, col="blue", axes=F, xlab='', ylab='', ylim=c(0, 1.2), type='p', main=mylabel);
lines( tbf$s ~ tbf$H2O2, col="blue",lty=2)
axis( 4, at=pretty(c(0, 1.2)))
legend ( max(H2O2)*0.7, 0.5, c("viability","half/full"), col=c("blue","green"), lty=c(2,1), pch=c(1,16) )
par(new=T)
plot( tbf$half.vs.full ~ tbf$H2O2, pch=16, xlab='H2O2',ylab="half/full", col='green')
lines(tbf$half.vs.full ~ tbf$H2O2, col='green')
bottoms = tbf$Black -tbf$Black.sd
bottoms[bottoms<0]= 0.001
title(mylabel)
dev.off() #end pdf
} #infile loop
#quit("yes")
